# cloudbuild-feature.yaml
# Builds ONE image using Kaniko, deploys it to TWO Cloud Run services:
# 1. Streamlit UI service (port 8080)
# 2. FastAPI API/WebSocket service (port 8000)
# Uses substitutions provided at trigger time.

steps:
  # Step 1: Build and Push using Kaniko
  - name: 'gcr.io/kaniko-project/executor:latest' # Use Kaniko executor
    id: Build  # Keep the ID the same for waitFor dependencies
    args:
      - '--destination=${_ARTIFACT_REGISTRY_REPO}/${_IMAGE_NAME}:${SHORT_SHA}'
      - '--context=dir://.'
      - '--dockerfile=Dockerfile'
      - '--cache=false'

  # --- Step 3a: Deploy Streamlit Service ---
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Deploy-Streamlit
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME_STREAMLIT}'
      - '--project=${_GCP_PROJECT_ID}'
      - '--image=${_ARTIFACT_REGISTRY_REPO}/${_IMAGE_NAME}:${SHORT_SHA}' # Image built by Kaniko
      - '--region=${_REGION}'
      - '--platform=managed'
      - '--port=8080'
      - '--allow-unauthenticated'
      - '--set-env-vars=^##^GOOGLE_API_KEY=${_GOOGLE_API_KEY}##AGENT_MODEL_NAME=${_AGENT_MODEL_NAME}##BQ_DEFAULT_LOCATION=${_BQ_DEFAULT_LOCATION}##VM_DEFAULT_ZONE=${_VM_DEFAULT_ZONE}##VM_DEFAULT_INSTANCE_NAME=${_VM_DEFAULT_INSTANCE_NAME}##VM_DEFAULT_MACHINE_TYPE=${_VM_DEFAULT_MACHINE_TYPE}##VM_DEFAULT_SOURCE_IMAGE=${_VM_DEFAULT_SOURCE_IMAGE}##VM_DEFAULT_DISK_SIZE_GB=${_VM_DEFAULT_DISK_SIZE_GB}##VM_DEFAULT_DISK_TYPE=${_VM_DEFAULT_DISK_TYPE}##VM_DEFAULT_SUBNETWORK=${_VM_DEFAULT_SUBNETWORK}##VM_DEFAULT_SERVICE_ACCOUNT=${_VM_DEFAULT_SERVICE_ACCOUNT}##GCP_PROJECT_ID=${_GCP_PROJECT_ID}##REGION=${_REGION}'
      - '--command=streamlit'
      - '--args=run,ui/app.py,--server.port=8080,--server.address=0.0.0.0,--server.headless=true'
      - '--memory=1Gi'
      - '--quiet'
    # Depends on the Kaniko build finishing
    waitFor: ['Build'] # Changed from 'Push'

  # --- Step 3b: Deploy FastAPI Service ---
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Deploy-FastAPI
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME_FASTAPI}'
      - '--project=${_GCP_PROJECT_ID}'
      - '--image=${_ARTIFACT_REGISTRY_REPO}/${_IMAGE_NAME}:${SHORT_SHA}' # Image built by Kaniko
      - '--region=${_REGION}'
      - '--platform=managed'
      - '--port=8000'
      - '--session-affinity'
      - '--allow-unauthenticated'
      - '--set-env-vars=^##^GOOGLE_API_KEY=${_GOOGLE_API_KEY}##AGENT_MODEL_NAME=${_AGENT_MODEL_NAME}##BQ_DEFAULT_LOCATION=${_BQ_DEFAULT_LOCATION}##VM_DEFAULT_ZONE=${_VM_DEFAULT_ZONE}##VM_DEFAULT_INSTANCE_NAME=${_VM_DEFAULT_INSTANCE_NAME}##VM_DEFAULT_MACHINE_TYPE=${_VM_DEFAULT_MACHINE_TYPE}##VM_DEFAULT_SOURCE_IMAGE=${_VM_DEFAULT_SOURCE_IMAGE}##VM_DEFAULT_DISK_SIZE_GB=${_VM_DEFAULT_DISK_SIZE_GB}##VM_DEFAULT_DISK_TYPE=${_VM_DEFAULT_DISK_TYPE}##VM_DEFAULT_SUBNETWORK=${_VM_DEFAULT_SUBNETWORK}##VM_DEFAULT_SERVICE_ACCOUNT=${_VM_DEFAULT_SERVICE_ACCOUNT}##GCP_PROJECT_ID=${_GCP_PROJECT_ID}##REGION=${_REGION}'
      - '--command=gunicorn'
      - '--args=ui.api:app,--workers=2,--worker-class=uvicorn.workers.UvicornWorker,--bind=0.0.0.0:8000'
      - '--memory=1Gi'
      - '--quiet'
    waitFor: ['Build'] # Changed from 'Push'

substitutions:
  _GCP_PROJECT_ID: ''
  _REGION: ''
  _REPO_ID: ''
  _IMAGE_NAME: ''
  _SERVICE_NAME_STREAMLIT: 'adk-multi-agent-streamlit' # Example name, provide yours
  _SERVICE_NAME_FASTAPI: 'adk-multi-agent-api'      # Example name, provide yours
  _GOOGLE_API_KEY: ''
  _AGENT_MODEL_NAME: ''
  _BQ_DEFAULT_LOCATION: ''
  _VM_DEFAULT_ZONE: ''
  _VM_DEFAULT_INSTANCE_NAME: ''
  _VM_DEFAULT_MACHINE_TYPE: ''
  _VM_DEFAULT_SOURCE_IMAGE: ''
  _VM_DEFAULT_DISK_SIZE_GB: ''
  _VM_DEFAULT_DISK_TYPE: ''
  _VM_DEFAULT_SUBNETWORK: ''
  _VM_DEFAULT_SERVICE_ACCOUNT: ''
  # Derived variable
  _ARTIFACT_REGISTRY_REPO: '${_REGION}-docker.pkg.dev/${_GCP_PROJECT_ID}/${_REPO_ID}'

# options section remains the same
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8' # Consider if Kaniko needs a different machine type