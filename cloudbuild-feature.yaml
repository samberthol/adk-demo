# cloudbuild-feature.yaml
# ... (previous comments and warnings remain) ...

steps:
  # 1. Build the container image
  - name: 'gcr.io/cloud-builders/docker'
    id: Build
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Sanitize branch name and combine with short SHA for the tag
        SANITIZED_TAG=$(echo "${BRANCH_NAME}" | sed 's|/|-|g')-${SHORT_SHA}
        # Construct the full image name using Cloud Build substitutions and the sanitized tag
        # Escape the $ for the shell variable SANITIZED_TAG using \$
        FULL_IMAGE_NAME="${_ARTIFACT_REGISTRY_REPO}/${_IMAGE_NAME}:\${SANITIZED_TAG}"
        echo "Building image: ${FULL_IMAGE_NAME}"
        # Use the fully constructed image name variable
        docker build -t "${FULL_IMAGE_NAME}" .

  # 2. Push the container image to Google Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: Push
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        SANITIZED_TAG=$(echo "${BRANCH_NAME}" | sed 's|/|-|g')-${SHORT_SHA}
        # Escape the $ for the shell variable SANITIZED_TAG using \$
        FULL_IMAGE_NAME="${_ARTIFACT_REGISTRY_REPO}/${_IMAGE_NAME}:\${SANITIZED_TAG}"
        echo "Pushing image: ${FULL_IMAGE_NAME}"
        # Use the fully constructed image name variable
        docker push "${FULL_IMAGE_NAME}"

  # 3. Deploy the image to Google Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Deploy
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        SANITIZED_TAG=$(echo "${BRANCH_NAME}" | sed 's|/|-|g')-${SHORT_SHA}
        # Escape the $ for the shell variable SANITIZED_TAG using \$
        FULL_IMAGE_NAME="${_ARTIFACT_REGISTRY_REPO}/${_IMAGE_NAME}:\${SANITIZED_TAG}"
        echo "Deploying image: ${FULL_IMAGE_NAME}"
        # Use the fully constructed image name variable in the --image flag
        gcloud run deploy "${_SERVICE_NAME_FEATURE}" \
          --image="${FULL_IMAGE_NAME}" \
          --region="${_REGION}" \
          --platform=managed \
          --port=8080 \
          --allow-unauthenticated \
          --set-env-vars="^##^GEMINI_API_KEY=${_GEMINI_API_KEY}##AGENT_MODEL_NAME=${_AGENT_MODEL_NAME}##BQ_DEFAULT_LOCATION=${_BQ_DEFAULT_LOCATION}##VM_DEFAULT_ZONE=${_VM_DEFAULT_ZONE}##VM_DEFAULT_INSTANCE_NAME=${_VM_DEFAULT_INSTANCE_NAME}##VM_DEFAULT_MACHINE_TYPE=${_VM_DEFAULT_MACHINE_TYPE}##VM_DEFAULT_SOURCE_IMAGE=${_VM_DEFAULT_SOURCE_IMAGE}##VM_DEFAULT_DISK_SIZE_GB=${_VM_DEFAULT_DISK_SIZE_GB}##VM_DEFAULT_DISK_TYPE=${_VM_DEFAULT_DISK_TYPE}##VM_DEFAULT_SUBNETWORK=${_VM_DEFAULT_SUBNETWORK}##VM_DEFAULT_SERVICE_ACCOUNT=${_VM_DEFAULT_SERVICE_ACCOUNT}##GCP_PROJECT_ID=${_GCP_PROJECT_ID}##REGION=${_REGION}' \
          --quiet

# images section remains the same
images:
  - '${_ARTIFACT_REGISTRY_REPO}/${_IMAGE_NAME}'

# substitutions section remains the same (values must be provided at trigger time)
substitutions:
  _GCP_PROJECT_ID: ''
  _REGION: ''
  _REPO_ID: ''
  _IMAGE_NAME: ''
  _SERVICE_NAME_FEATURE: ''
  _GEMINI_API_KEY: ''
  _AGENT_MODEL_NAME: ''
  _BQ_DEFAULT_LOCATION: ''
  _VM_DEFAULT_ZONE: ''
  _VM_DEFAULT_INSTANCE_NAME: ''
  _VM_DEFAULT_MACHINE_TYPE: ''
  _VM_DEFAULT_SOURCE_IMAGE: ''
  _VM_DEFAULT_DISK_SIZE_GB: ''
  _VM_DEFAULT_DISK_TYPE: ''
  _VM_DEFAULT_SUBNETWORK: ''
  _VM_DEFAULT_SERVICE_ACCOUNT: ''
  _ARTIFACT_REGISTRY_REPO: '${_REGION}-docker.pkg.dev/${_GCP_PROJECT_ID}/${_REPO_ID}'

options:
  logging: CLOUD_LOGGING_ONLY